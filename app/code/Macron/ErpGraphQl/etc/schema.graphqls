type Query {
    clients(
        pageSize: Int = 10
        currentPage: Int = 1
    ): Clients
    @resolver(class: "\\Macron\\ErpGraphQl\\Model\\Resolver\\Clients")
    @doc(description: "Get list of clients")

    client (
        client_id: Int!
    ): ClientType
    @resolver(class: "\\Macron\\ErpGraphQl\\Model\\Resolver\\Client")
    @doc(description: "Get client by id")

    clientsByKeyword(
        keyword: String!
    ): [ClientType]
    @resolver(class: "Macron\\ErpGraphQl\\Model\\Resolver\\ClientsByKeyword")
    @doc(description: "Get clients by keyword")

    shipments(
        pageSize: Int = 10
        currentPage: Int = 1
        filter: ShipmentsFilterInput
    ): Shipments
    @resolver(class: "\\Macron\\ErpGraphQl\\Model\\Resolver\\Shipments")
    @doc(description: "Get shipments list")

    shipmentsByKeyword(
        keyword: String!
    ): [Shipment]
    @resolver(class: "Macron\\ErpGraphQl\\Model\\Resolver\\ShipmentsByKeyword")
    @doc(description: "Get shipments by keyword")
}

type Mutation {
    deleteClient(
        client_id: Int!
    ): ClientType
    @resolver(class: "\\Macron\\ErpGraphQl\\Model\\Resolver\\DeleteClient")
    @doc(description: "Delete client by id")

    createClient(
        client: CreateClientInput!
    ): ClientType
    @resolver(class: "\\Macron\\ErpGraphQl\\Model\\Resolver\\CreateClient")
    @doc(description: "Create a new client")

    updateClient(
        client: UpdateClientInput!
    ): ClientType
    @resolver(class: "\\Macron\\ErpGraphQl\\Model\\Resolver\\UpdateClient")
    @doc(description: "Update client")
}

type Clients {
    items: [ClientType]
    page_info: SearchResultPageInfo
}

type ClientType {
    entity_id: Int
    company_name: String
    address: String
    vat_number: Int
    contract_expiracy_date: String
    affiliation: String
    sport: Int
    category: Int
    primary_color: Int
    secondary_color: Int
    current_brand: String
    coni_id: Int
    membership_no: Int
    distance: Int
    contact_person: String
    mobile: String
    email: String
}

type Shipment {
    entity_id: Int
    shipment_number: String
    status: String
    tracking_number: String
    date: String
    customer_name: String
    address: String,
    packing_list_link: String
}

type Shipments {
    items: [Shipment]
    page_info: SearchResultPageInfo
}

input CreateClientInput {
    company_name: String!
    address: String
    vat_number: Int
    contract_expiracy_date: String
    affiliation: String
    sport: Int
    category: Int
    primary_color: Int
    secondary_color: Int
    current_brand: String
    coni_id: Int
    membership_no: Int
    distance: Int
    contact_person: String
    mobile: String
    email: String
}

input UpdateClientInput {
    entity_id: Int!
    company_name: String!
    address: String
    vat_number: Int
    contract_expiracy_date: String
    affiliation: String
    sport: Int
    category: Int
    primary_color: Int
    secondary_color: Int
    current_brand: String
    coni_id: Int
    membership_no: Int
    distance: Int
    contact_person: String
    mobile: String
    email: String
}

input ShipmentsFilterInput
    @doc(description: "Identifies the filter to use for filtering shipments.") 
{
  customer_name: FilterStringTypeInput @doc(description: "Filters by customer name.")
  status: FilterStringTypeInput @doc(description: "Filters by shipment status.")
}
