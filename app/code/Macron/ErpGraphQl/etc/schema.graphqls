type Query {
    clients(
        pageSize: Int = 10
        currentPage: Int = 1
    ): Clients
        @resolver(class: "\\Macron\\ErpGraphQl\\Model\\Resolver\\Clients")
        @doc(description: "Get list of clients")

    client (
        client_id: Int!
    ): Client
        @resolver(class: "\\Macron\\ErpGraphQl\\Model\\Resolver\\Client")
        @doc(description: "Get client by id")

    clientsByKeyword(
        keyword: String!
    ): [Client]
        @resolver(class: "Macron\\ErpGraphQl\\Model\\Resolver\\ClientsByKeyword")
        @doc(description: "Get clients by keyword")

    invoices: [InvoiceType]
        @resolver(class: "\\Macron\\ErpGraphQl\\Model\\Resolver\\Invoices")
        @doc(description: "Get list of invoices")


    shipments(
        currentPage: Int = 1
        pageSize: Int = 10
    ): [Shipment]
        @resolver(class: "\\Macron\\ErpGraphQl\\Model\\Resolver\\Shipments")
        @doc(description: "Get shipments list")


    clientOptions: ClientOptions
        @resolver(class: "\\Macron\\ErpGraphQl\\Model\\Resolver\\ClientOptions")
        @doc(description: "Get all client options")
}

type Mutation {
    deleteClient(
        client_id: Int!
    ): Client
        @resolver(class: "\\Macron\\ErpGraphQl\\Model\\Resolver\\DeleteClient")
        @doc(description: "Delete client by id")

    createClient(
        client: CreateClientInput!
    ): Client
        @resolver(class: "\\Macron\\ErpGraphQl\\Model\\Resolver\\CreateClient")
        @doc(description: "Create a new client")

    updateClient(
        client: UpdateClientInput!
    ): Client
        @resolver(class: "\\Macron\\ErpGraphQl\\Model\\Resolver\\UpdateClient")
        @doc(description: "Update client")
}

type Clients {
    items: [Client]
    page_info: SearchResultPageInfo
}

type Client {
    entity_id: Int
    company_name: String
    address: String
    vat_number: Int
    date_id: Int
    date: String
    affiliation_id: Int
    affiliation: String
    sport_id: Int
    sport: String
    category: String
    primary_color_id: Int
    primary_color: String
    secondary_color_id: Int
    secondary_color: String
    current_brand_id: Int
    current_brand: String
    coni_id: Int
    membership_no: Int
    distance_id: Int
    distance: String
    contact_person: String
    mobile: String
    email: String
    is_contract_signed: Boolean
}

type Shipment {
    entity_id: Int
    shipment_number: String
    status: String
    tracking_number: String
    date: String
    customer_name: String
    address: String
    packing_list_link: String
}

input CreateClientInput {
    company_name: String!
    address: String
    vat_number: Int
    date_id: Int
    affiliation_id: Int
    sport_id: Int
    category: String
    primary_color_id: Int
    secondary_color_id: Int
    current_brand_id: Int
    coni_id: Int
    membership_no: Int
    distance_id: Int
    contact_person: String
    mobile: String
    email: String
    is_contract_signed: Boolean
}

input UpdateClientInput {
    entity_id: Int!
    company_name: String!
    address: String
    vat_number: Int
    date_id: Int
    date: String
    affiliation_id: Int
    sport_id: Int
    category: String
    primary_color_id: Int
    secondary_color_id: Int
    current_brand_id: Int
    coni_id: Int
    membership_no: Int
    distance_id: Int
    contact_person: String
    mobile: String
    email: String
    is_contract_signed: Boolean
}

type ClientOptions {
    affiliations: [Option]
    current_brands: [Option]
    dates: [Option]
    sports: [Option]
    colors: [Option]
    distances: [Option]
}

type Option {
    id: Int
    label: String
}

type InvoiceType {
    id: Int
    invoice_number: String
    user_sap_id: String
    date: String
    currency: String
    grand_total: String
    status: String
    download_link: String
    firstname: String
    lastname: String
    address_city: String
    address_street: String
    address_postcode: String
    address_country_id: String
    address_telephone: String
}
